predefinedTypes: # 预定义的 DTO 类型
  userProfile:
    type: object
    properties:
      userID: 
        description: 用户 ID
        type: number
      username:
        description: 用户名
        type: string
      nickname:
        description: 昵称
        type: string
      email:
        description: 邮箱
        type: string
      avatar:
        description: 头像文件地址
        type: string? # 头像文件地址，问号表示该值可空，相当于 string | null，下同
      registerDate:
        description: 注册日期
        type: string # 格式化为 ISO string 的日期字符串
      birthday:
        description: 生日
        type: string? # 格式化为 ISO string 的日期字符串
      motto:
        description: 签名
        type: string?
  registerInfo:
    type: object
    properties:
      username:
        description: 用户名
        type: string
      password:
        description: 密码
        type: string
      nickname:
        description: 昵称
        type: string
      email:
        description: 邮箱
        type: string
      avatar:
        description: 头像文件地址
        type: string? # 头像文件地址，问号表示该值可空，相当于 string | null，下同
      registerDate:
        description: 注册日期
        type: string # 格式化为 ISO string 的日期字符串
      birthday:
        description: 生日
        type: string? # 格式化为 ISO string 的日期字符串
      motto:
        description: 签名
        type: string?
  updateInfo:
    type: object
    properties:
      password:
        description: 密码
        type: string
      nickname:
        description: 昵称
        type: string
      email:
        description: 邮箱
        type: string
      avatar:
        description: 头像文件地址
        type: string? # 头像文件地址，问号表示该值可空，相当于 string | null，下同
      registerDate:
        description: 注册日期
        type: string # 格式化为 ISO string 的日期字符串
      birthday:
        description: 生日
        type: string? # 格式化为 ISO string 的日期字符串
      motto:
        description: 签名
        type: string?
  blogInfo:
    type: object
    properties:
      blogID:
        type: number
        description: 博客的 ID
      blogger:
        type: string
        description: 博客发布者的用户名
      issueDate:
        type: string # 格式化为 ISO string 的日期字符串
        description: 发布日期
      title:
        type: string
        description: 博客标题
      content:
        type: string
        description: 博客内容，以 markdown 形式传输和保存
  newBlogInfo:
    type: object
    properties:
      title:
        type: string
        description: 博客标题
      content:
        type: string
        description: 博客内容，以 markdown 形式传输和保存

'POST api.my-blog.cn': # 就假装是这个域名吧，貌似被阿里云注册了？不重要不重要
  description: 用户登录
  request: # 表示发送给这个接口的请求格式，下同
    header:
      Authentication:
        type: string
        description: 用户名和密码信息，使用 Basic Auth（Oauth 学不会）

  response: # 表示这个接口的预期响应，下同
    401:
      description: 用户名或密码错误
    201:
      header:
        type: object
        properties:
          set-cookie:
            type: string
            description: >
              假定服务端采取了 session_id 的策略并且为 session_id 设定了过期时间，
              那么每个有效的用户请求都需要重新将 session_id 写进 cookie 里以刷新它的过期时间，
              以下接口的响应头描述中将忽略此字段，但它仍然存在于这些接口的响应头里

      body:
        type: object
        properties:
          userID:
            type: string
            description: 需要告诉前端已经登录的用户的 id 以方便近一步请求资源

'DELETE api.my-blog.cn':
  description: 用户登出
  response:
    204:
      description: 不管该用户是否已经登录，都会返回登出成功的信息，并且服务端不会在响应体里放任何内容

'GET api.my-blog.cn/users':
  description: 获取用户列表
  user-role: Admin # 用于表述获取该条资源最少需要的权限，可能会有各种不同的表示，下同
  response:
    403:
      description: 权限不足
    200:
      body:
        type: array
        item-type: predefinedType.userProfile #用于表示数组中的每一项的类型，下同

'POST api.my-blog.cn/users':
  description: 创建用户
  request:
    body:
      type: predefinedType.registerInfo
  response:
    409:
      description: 用户名冲突
    201:
      description: 用户创建成功
      
'GET api.my-blog.cn/user/:user_id':
  description: 获取单个用户的全部信息
  user-role: 'Account Owner'
  response:
    403:
      description: 权限不足
    200:
      body:
        type: predefinedType.userProfile

'PUT api.my-blog.cn/user/:user_id':
  description: 更新用户信息
  user-role: 'Account Owner'
  request:
    body: predefinedType.updateInfo
  response:
    403:
      description: 权限不足
    404:
      description: 用户不存在
    204:
      description: 更新成功

'DELETE api.my-blog.cn/user/:user_id':
  description: 从数据库中删除用户
  user-role: Admin
  response:
    403:
      description: 权限不足
    404:
      description: 用户不存在
    204:
      description: 删除成功
      
'GET api.my-blog.cn/blogs':
  description: 获取全部博文
  queryParam: # 请求参数，以键值对的形式，下同
    blogger: 根据博主的用户名筛选博文
  response:
    200:
      description: 获取成功
      body:
        type: array
        item-type: predefinedType.blogInfo
        
'POST api.my-blog.cn/blogs':
  description: 发布新博文
  user-role: 'Registered User'
  request:
    body:
      type: predefinedType.newBlogInfo
  response:
    201:
      description: 发布成功
    403:
      description: 权限不足

'GET api.my-blog.cn/blog/:blog_id':
  description: 获取 blog_id 对应的博文
  response:
    200:
      description: 获取成功
      body:
        type: predefinedType.blogInfo
    404:
      description: 博客不存在
      
'PUT api.my-blog.cn/blog/:blog_id':
  description: 更新 blog_id 对应的博文
  user-role: 'Blog Issuer'
  request:
    body:
      type: predefinedType.newBlogInfo
  response:
    204:
      description: 更新成功
    403:
      description: 权限不足
    404:
      description: 博客不存在
      
'DELETE api.my-blog.cn/blog/:blog_id':
  description: 删除 blog_id 对应的博文
  user-role: 'Blog Issuer'
  request:
    body:
      type: predefinedType.newBlogInfo
  response:
    204:
      description: 删除成功
    403:
      description: 权限不足
    404:
      description: 博客不存在